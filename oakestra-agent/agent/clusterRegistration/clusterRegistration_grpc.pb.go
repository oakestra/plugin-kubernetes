// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: clusterRegistration/clusterRegistration.proto

package clusterRegistration

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegisterClusterClient is the client API for RegisterCluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisterClusterClient interface {
	HandleInitGreeting(ctx context.Context, in *CS1Message, opts ...grpc.CallOption) (*SC1Message, error)
	HandleInitFinal(ctx context.Context, in *CS2Message, opts ...grpc.CallOption) (*SC2Message, error)
}

type registerClusterClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisterClusterClient(cc grpc.ClientConnInterface) RegisterClusterClient {
	return &registerClusterClient{cc}
}

func (c *registerClusterClient) HandleInitGreeting(ctx context.Context, in *CS1Message, opts ...grpc.CallOption) (*SC1Message, error) {
	out := new(SC1Message)
	err := c.cc.Invoke(ctx, "/clusterRegistration.register_cluster/handle_init_greeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerClusterClient) HandleInitFinal(ctx context.Context, in *CS2Message, opts ...grpc.CallOption) (*SC2Message, error) {
	out := new(SC2Message)
	err := c.cc.Invoke(ctx, "/clusterRegistration.register_cluster/handle_init_final", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisterClusterServer is the server API for RegisterCluster service.
// All implementations must embed UnimplementedRegisterClusterServer
// for forward compatibility
type RegisterClusterServer interface {
	HandleInitGreeting(context.Context, *CS1Message) (*SC1Message, error)
	HandleInitFinal(context.Context, *CS2Message) (*SC2Message, error)
	mustEmbedUnimplementedRegisterClusterServer()
}

// UnimplementedRegisterClusterServer must be embedded to have forward compatible implementations.
type UnimplementedRegisterClusterServer struct {
}

func (UnimplementedRegisterClusterServer) HandleInitGreeting(context.Context, *CS1Message) (*SC1Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleInitGreeting not implemented")
}
func (UnimplementedRegisterClusterServer) HandleInitFinal(context.Context, *CS2Message) (*SC2Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleInitFinal not implemented")
}
func (UnimplementedRegisterClusterServer) mustEmbedUnimplementedRegisterClusterServer() {}

// UnsafeRegisterClusterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisterClusterServer will
// result in compilation errors.
type UnsafeRegisterClusterServer interface {
	mustEmbedUnimplementedRegisterClusterServer()
}

func RegisterRegisterClusterServer(s grpc.ServiceRegistrar, srv RegisterClusterServer) {
	s.RegisterService(&RegisterCluster_ServiceDesc, srv)
}

func _RegisterCluster_HandleInitGreeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CS1Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterClusterServer).HandleInitGreeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterRegistration.register_cluster/handle_init_greeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterClusterServer).HandleInitGreeting(ctx, req.(*CS1Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegisterCluster_HandleInitFinal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CS2Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterClusterServer).HandleInitFinal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusterRegistration.register_cluster/handle_init_final",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterClusterServer).HandleInitFinal(ctx, req.(*CS2Message))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterCluster_ServiceDesc is the grpc.ServiceDesc for RegisterCluster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegisterCluster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clusterRegistration.register_cluster",
	HandlerType: (*RegisterClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "handle_init_greeting",
			Handler:    _RegisterCluster_HandleInitGreeting_Handler,
		},
		{
			MethodName: "handle_init_final",
			Handler:    _RegisterCluster_HandleInitFinal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clusterRegistration/clusterRegistration.proto",
}
